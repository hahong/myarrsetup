#!/usr/bin/env python
import os
import sys
import re
from maru.utils import parse_opts2
from glob import glob

##############################################################################
#### Variables

# -- common files' extensions: the first one is used first
POSTPROC_EXTS = ['.psf.h5', '.psf.pk', '.psf.pkl']
MWK_EXTS = ['.mwk']
NEU_EXTS = ['.nev', '.plx']
POSTPROC_ADV_EXTS = ['.psf.h5']   # only this is supported for "advanced" jobs
FEAT_EXTS = ['.feat.h5']
PSTH_EXTS = ['.pdf']
DIRSEP = ','
BADEXT = '.bad'
VARCHR = '$'

# -- command line patterns
MERGE_CMD = r'( cp $mwksrc $mwkmerged && maru-merge $extopts $mwkmerged $neusrc && rm -f $mwkmerged/*.bak ) || echo Merge failure: $mwkmerged'   # noqa
POSTPROC_CMD = r'maru-psinfo $extopts $mwkmerged $ppout || echo Postprocess failure: $ppout'   # noqa
PLOTPSTH_CMD = r'maru-check-psth $extopts $psthprefix $psf || echo PSTH analysis failure: $psf'   # noqa
PSF2FEAT_CMD = r'maru-util-psinfo2feat tbte $extopts $psf $feat $tbs $tes || echo Feature generation failure: $feat'  # noqa

# -- for psinfo()
POSTPROC_OPTS_DEF = '--exclude_img=circ_mask --ign_unregistered --delay=300 --t_stop=350000 --nelec=$nelec $indvopts'  # noqa
# Number of electrodes for each swcard config.
# Each entry = (regex pattern, number of channels)
NELEC_SPECS = [
        ('.*S110204.*', 128), ('.*_S110720_.*', 128),
        ('.*_S110720A_.+_NSP.*', 96),
        # when only _S110720A_ appears, then we need channel shift
        ('.*_S110720A_.*', '96 --ch_shift=20110720A'),
        ('.*_NSP1_S130404.*', 128), ('.*_NSP2_S130404.*', 128),
        # default: 96 channels
        ('.*', 96)]
# Additional options for individual experiments
# Each entry = (regex pattern, string)
INDVOPTS_SPECS = [
        ('.*Chou.*', '--extinfo'),
        ('.*RSVPRF.*', '--extinfo'),
        ('.*', '')]


# -- for psf2feat()
DEFAULT_TBTE = [[70, 170], [50, 100], [100, 150], [150, 200], [200, 250],
                [70, 270]]


##############################################################################
#### Main code
USAGE = \
"""mkjobs <mode> [options] <output file name or STDOUT> <arg 1> <arg 2> ...
Generates shell scripts for various levels of array data processing

Merge mode:
    mkjobs merge [options] <output> <mwk dir> <neu dir> <mwk_merged dir>
Generates commands to merge .mwk and .nev/.plx files.
Options:
    --extopts=<str>      Additional options passed to maru-merge

Processing peristimulus firing information mode:
    mkjobs psf [options] <output> <mwk_merged dir> <psf dir>
Generates commands to produce peristimulus firing information .psf.h5 files.
Options:
    --extopts=<str>      Additional options passed to maru-psinfo

Feature computation mode:
    mkjobs feat [options] <output> <psf dir> <feat dir>
Generates commands to create time-binned rate code features.  Default
integration time bines are: [70, 170], [50, 100], [100, 150], [150, 200],
[200, 250], [70, 270] where numbers are in ms.
Options:
    --tbte=t_begin1,t_end1,t_begin2,t_end2,...
                         Override the default time bins (in ms).
    --extopts=<str>      Additional options passed to maru-util-psinfo2feat

PSTH plotting mode:
    mkjobs plotpsth <output> <psf dir> <PSTH dir>
Generates commands to plot PSTHs for each processed .psf.h5 files.
"""


def find_targets(paths, exts):
    if isinstance(paths, (str, unicode)):
        paths = [paths]

    fns = [(os.path.basename(f)[:-len(ext)], f)
            for path in paths for ext in exts
            for f in glob(path + os.sep + '*' + ext)]
    fns.reverse()
    return dict(fns)   # only select the last basenames in the reversed fns


def regexreplace(sold, sreplace, specs, fn):
    for regex, snew in specs:
        if re.match(regex, fn):
            break
    return sold.replace(sreplace, str(snew))


def getjoblines(patt, jobs, save=None, check=True):
    """Gives a job list that are suitable for writelines."""
    if patt[-1] != '\n':
        patt += '\n'
    if isinstance(jobs, dict):
        jobs = [e for e in jobs.itervalues()]

    res = []
    for replaces in jobs:
        r = patt
        for sold, snew in replaces:
            r = r.replace(sold, snew)
        res.append(r)
        if check:
            assert VARCHR not in r

    if save == 'STDOUT':
        print ''.join(res).strip()
    elif save is not None:
        open(save, 'wt').writelines(res)
    return res


def isbad(fn, badext=BADEXT):
    return os.path.exists(fn + badext)


def merge(outfn, mwk_dir, neu_dir, mwkmerged_dir, extopts='',
        mwk_exts=MWK_EXTS, neu_exts=NEU_EXTS, merge_cmd=MERGE_CMD):
    dmwksrc = find_targets(mwk_dir, mwk_exts)
    dneusrc = find_targets(neu_dir, neu_exts)
    dmwkdst = find_targets(mwkmerged_dir, mwk_exts)

    jobs = {}
    for neusrc in sorted(dneusrc):
        if neusrc in dmwkdst:
            # already merged
            continue
        mwkmergedfn = mwkmerged_dir + os.sep + neusrc + mwk_exts[0]
        if isbad(mwkmergedfn):
            continue

        m = [(neusrc.startswith(mwksrc), mwksrc) for mwksrc in sorted(dmwksrc)]
        match = [e[0] for e in m]
        mwksrcs = [e[1] for e in m]

        if sum(match) > 1:
            raise ValueError('Multiple maching mwks with neu: %s' % neusrc)
        elif sum(match) == 0:
            # no matching mwk files
            continue

        mwksrc = mwksrcs[match.index(True)]
        jobs[neusrc] = [
                ('$mwksrc', dmwksrc[mwksrc]),
                ('$neusrc', dneusrc[neusrc]),
                ('$mwkmerged', mwkmergedfn),
                ('$extopts', extopts)
            ]
    getjoblines(merge_cmd, jobs, save=outfn)


def psinfo(outfn, mwkmerged_dir, postproc_dir, extopts='',
        postproc_exts=POSTPROC_EXTS, mwk_exts=MWK_EXTS,
        postproc_cmd=POSTPROC_CMD,
        postproc_opts_def=POSTPROC_OPTS_DEF,
        nelec_specs=NELEC_SPECS, indvopts_specs=INDVOPTS_SPECS):
    dmwkdst = find_targets(mwkmerged_dir, mwk_exts)
    dpsfdst = find_targets(postproc_dir, postproc_exts)

    jobs = {}
    for mwkdst in sorted(dmwkdst):
        if mwkdst in dpsfdst:
            # postfile already exists
            continue
        ppoutfn = postproc_dir + os.sep + mwkdst + postproc_exts[0]
        if isbad(ppoutfn):
            continue

        opts_def = regexreplace(postproc_opts_def, '$nelec',
                nelec_specs, mwkdst)
        opts_def = regexreplace(opts_def, '$indvopts',
                indvopts_specs, mwkdst)
        assert VARCHR not in opts_def

        jobs[mwkdst] = [
                ('$mwkmerged', dmwkdst[mwkdst]),
                ('$ppout', ppoutfn),
                ('$extopts', opts_def + ' ' + extopts),
            ]
    getjoblines(postproc_cmd, jobs, save=outfn)


def plotpsth(outfn, postproc_dir, psth_dir, extopts='',
        postproc_exts=POSTPROC_ADV_EXTS, psth_exts=PSTH_EXTS,
        plotpsth_cmd=PLOTPSTH_CMD):
    dpsfdst = find_targets(postproc_dir, postproc_exts)
    dpsthdst = find_targets(psth_dir, psth_exts)

    jobs = {}
    for psf in sorted(dpsfdst):
        if psf in dpsthdst:
            # postfile already exists
            continue
        psthprefix = psth_dir + os.sep + psf

        jobs[psf] = [
                ('$psf', dpsfdst[psf]),
                ('$psthprefix', psthprefix),
                ('$extopts', extopts),
            ]
    getjoblines(plotpsth_cmd, jobs, save=outfn)


def psf2feat(outfn, postproc_dir, feat_dir, extopts='',
        postproc_exts=POSTPROC_ADV_EXTS, feat_exts=FEAT_EXTS,
        psf2feat_cmd=PSF2FEAT_CMD, tbte=DEFAULT_TBTE):
    dpsf = find_targets(postproc_dir, postproc_exts)
    dfeat = find_targets(feat_dir, feat_exts)
    tbs = ','.join([str(e[0]) for e in tbte])
    tes = ','.join([str(e[1]) for e in tbte])

    jobs = {}
    for psf in sorted(dpsf):
        if psf in dfeat:
            # feat.h5 already exists
            continue
        featfn = feat_dir + os.sep + psf + feat_exts[0]

        jobs[psf] = [
                ('$psf', dpsf[psf]),
                ('$feat', featfn),
                ('$extopts', extopts),
                ('$tbs', tbs),
                ('$tes', tes)
            ]
    getjoblines(psf2feat_cmd, jobs, save=outfn)


def main(args, sep=DIRSEP):
    try:
        args, opts = parse_opts2(args[1:])
        mode = args[0]
        args = args[1:]

        if mode == 'merge':
            assert len(args) == 4, 'Incorrect arguments'
        elif mode == 'psf':
            assert len(args) == 3, 'Incorrect arguments'
        elif mode == 'plotpsth':
            assert len(args) == 3, 'Incorrect arguments'
        elif mode == 'feat':
            assert len(args) == 3, 'Incorrect arguments'
        else:
            assert False, 'Not valid mode: %s' % mode
    except Exception as e:
        print USAGE
        if isinstance(e, AssertionError):
            print '***', e
        return 1

    kwargs = {}
    if 'extopts' in opts:
        kwargs['extopts'] = opts['extopts']
        print '* Extra options:', kwargs['opts']
    if 'tbte' in opts:
        tbte = opts['tbte'].split(',')
        if len(tbte) % 2 != 0:
            print '*** Unmatched t_begin and t_end'
            return 1
        tbte = [(int(tb), int(te)) for tb, te in zip(tbte[::2], tbte[1::2])]
        if not all([te > tb for tb, te in tbte]):
            print '*** t_end must be larger than t_begin'
            return 1
        kwargs['tbte'] = tbte
        print '* Time-bins:', tbte

    outfn = args[0]
    args = args[1:]
    if not all([os.path.exists(e) for e in args]):
        print 'Not all directories exist.'
        return 1

    if mode == 'merge':
        merge(outfn, *args, **kwargs)
    elif mode == 'psf':
        psinfo(outfn, *args, **kwargs)
    elif mode == 'plotpsth':
        plotpsth(outfn, *args, **kwargs)
    elif mode == 'feat':
        psf2feat(outfn, *args, **kwargs)
    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv))
